import asyncio
import logging
from aiogram import Bot, Dispatcher, types, executor
from sql.models import User, Comment, Levels, Event, Chat
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import BotCommand
import random

logging.basicConfig(level=logging.INFO)
bot = Bot(token="5899970158:AAEB_hBtdbQs4Izpv3foYmrIkARntrJZ6ug")
dp = Dispatcher(bot, storage=MemoryStorage())


class Form(StatesGroup):
    name = State()


class EventForm(StatesGroup):
    title = State()
    description = State()
    date = State()
    time = State()
    place = State()
    price = State()
    code_phrase = State()
    chat_id = State()

class CheckEventForm(StatesGroup):
    code_phrase = State()


class BirdMailForm(StatesGroup):
    letter = State()

async def set_main_menu():
    await bot.set_my_commands([
        BotCommand(command="/edit_bird", description="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø—Ç–∏—Ü—ã"),
        BotCommand(command="/profile", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="/create_event", description="–°–æ–∑–¥–∞—Ç—å —Å–ª—ë—Ç"),
        BotCommand(command="/check_event", description="–û—Ç–º–µ—Ç–∏—Ç—å —Å–ª—ë—Ç")
    ])

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ë–ª–∏–Ω –≤–∞—É –Ω—É –≤—Å–µ")


@dp.message_handler(commands='edit_bird')
async def edit_bird(message: types.Message):
    await Form.name.set()
    await message.answer("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–≤–∞—Ç—å –ø—Ç–∏—Ü—É?")


@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        id = message.from_user.id
        user = User()
        user.edit_bird_name(id, data['name'])
    await bot.send_message(id, f"–ò–º—è —Å–º–µ–Ω–µ–Ω–æ –Ω–∞ {data['name']}")
    await state.finish()


@dp.message_handler(commands=['reg'])
async def reg_user(message: types.Message):
    if message.chat.type == 'private':
        nickname = message.from_user.username
        id = message.from_user.id
        user = User()
        if user.if_exists(id):
            await message.answer("–¢—ã —Ö—É?–π")
        else:
            user.add_user(id=id, nickname=nickname)
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∞–ª–∏—Å—å!")
            await get_level_info(message)
    else:
        return

@dp.message_handler(content_types=['text'], commands=['profile'])
async def get_level_info(message: types.Message):
    if message.chat.type == 'private':
        id = message.from_user.id
        user = User().get_profile_data(id)
        l = Levels()
        level = User().get_profile_data(id).level
        bird = l.get_bird_data(level)
        msg = f"–í–∞—à–∞ –ø—Ç–∏—Ü–∞ - {bird.bird_name}üê§\n–ò–º—è –≤–∞—à–µ–π –ø—Ç–∏—Ü—ã - {user.bird_name}\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å - {level}\n{bird.bird_description}\n–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å - {user.level_progress}/100"
        await message.answer(msg)
    else:
        return

@dp.message_handler(commands=['create_event'])
async def create_event(message: types.Message):
    await EventForm.title.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")


@dp.message_handler(state=EventForm.title)
async def process_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text
    await EventForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")

@dp.message_handler(state=EventForm.description)
async def process_desc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await EventForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")


@dp.message_handler(state=EventForm.date)
async def process_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['date'] = message.text
    await EventForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")

@dp.message_handler(state=EventForm.time)
async def process_time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['time'] = message.text
    await EventForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")


@dp.message_handler(state=EventForm.place)
async def process_place(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['place'] = message.text
    await EventForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")


@dp.message_handler(state=EventForm.price)
async def process_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = int(message.text)
    await EventForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ")


@dp.message_handler(state=EventForm.code_phrase)
async def process_phrase(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['code_phrase'] = message.text
        event = Event()
        event.create_event(data['title'], data['description'], data['date'], data['time'], data['place'], data['price'], data['code_phrase'])
    await EventForm().next()
    chats = Chat.get_all_chats()
    choice = ''
    for chat in chats:
        choice += f"{chat.chat_name}\n"
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:\n{choice}")


@dp.message_handler(state=EventForm.chat_id)
async def end_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['chat_id'] = message.text
        ch = Chat()
        chat = ch.get_chat_by_title(data['chat_id'])
        msg = f"–ù–æ–≤—ã–π —Å–ª—ë—Ç!\n{data['title']}\n{data['description']}\n{data['date']} {data['time']}\n{data['place']}\n –ù–∞–≥—Ä–∞–¥–∞ - {data['price']} –∑—ë—Ä–µ–Ω."
        await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ–±—â–∏–π —á–∞—Ç")
        await bot.send_message(chat.chat_id, msg)
    await state.finish()


@dp.message_handler(commands=['reg_chat'])
async def cmd_reg_chat(message: types.Message):
    id = message.chat.id
    title = message.chat.title
    chat = Chat()
    chat.add_chat(id, title)
    await message.answer("–ß–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")


@dp.message_handler(commands=['check_event'])
async def check_event(message: types.Message):
    if message.chat.type == 'private':
        await CheckEventForm.code_phrase.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ")
    else:
        pass

@dp.message_handler(state=CheckEventForm.code_phrase)
async def process_phrase(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['code_phrase'] = message.text
        try:
            e = Event()
            event = e.get_event(data['code_phrase'])
            points = event.price
            id = message.from_user.id
            user = User().get_profile_data(id)
            user.change_level_progress(id, points)
            await message.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ, –≤—ã –ø–æ–ª—É—á–∏–ª–∏  {points} –∑–µ—Ä–µ–Ω!")
        except:
            await message.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...")
    await state.finish()


@dp.message_handler(commands=['bird_mail'])
async def cmd_start(message: types.Message):
    if message.chat.type == 'private':
        await BirdMailForm.letter.set()
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø–∏—Å—å–º–æ!")
    else:
        pass

@dp.message_handler(state=BirdMailForm.letter)
async def process_phrase(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['letter'] = message.text
        try:
            u = User()
            users = u.all_users()
            while True:
                user = random.choice(users)
                if user.tg_id != message.from_user.id:
                    await bot.send_message(user.tg_id, f"–í–∞–º –ø—Ä–∏—à–ª–æ–ø–∏—Å—å–º–æ –ø–æ –ø—Ç–∏—á—å–µ–π –ø–æ—á—Ç–µ:\n{data['letter']}")
                    u.change_level_progress(message.from_user.id, 5)
                    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ 5 –∑—ë—Ä–µ–Ω.")
                    break
        except:
            await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
    await state.finish()

@dp.message_handler()
async def cmd_start(message: types.Message):
    return message.text


@dp.message_handler(commands=['–Ω–∞—Ö—É–π_—Å—Ö–æ–¥–∏'])
async def cmd_start(message: types.Message):
    await message.answer("–°—Ö–æ–¥–∏–ª")


@dp.message_handler(commands=['–±–ª—è—Ç—å'])
async def cmd_start(message: types.Message):
    await message.answer("–°–æ–≥–ª–∞—Å–µ–Ω")


async def main():
    await set_main_menu()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞—à–µ–º—É –∫–æ–ª–ª–µ–∫—Ç–∏–≤—É —Å–ø–ª–æ—Ç–∏—Ç—å—Å—è! –û—Ç–ø—Ä–∞–≤—å /reg , —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:)")
